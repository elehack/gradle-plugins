import org.gradle.plugins.signing.SigningExtension
import org.gradle.plugins.signing.signatory.Signatory
import org.gradle.plugins.signing.signatory.SignatoryProvider
import org.gradle.plugins.signing.signatory.SignatorySupport
import org.gradle.plugins.signing.signatory.pgp.PgpKeyId

apply plugin: 'signing'

ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")

configurations {
    wagon
}
dependencies {
    wagon 'org.apache.maven.wagon:wagon-ssh-external:2.6'
    wagon 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.6'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

artifacts {
    archives sourcesJar, javadocJar
}

task archiveInfo << {
    println "$name archives:"
    for (art in configurations.archives.artifacts) {
        println "  ${art.file}: $art.classifier $art.extension"
    }
    println "dependencies: $configurations.archives.dependencies"
    println "tasks: $configurations.archives.buildDependencies"
    println "upload deps:"
}

class GnuPGSignatory extends SignatorySupport {
    private Project project

    public GnuPGSignatory(Project prj) {
        project = prj
    }

    @Override
    String getName() {
        return "GnuPG"
    }

    @Override
    void sign(InputStream inputStream, OutputStream outputStream) {
        project.exec {
            executable 'gpg'
            args '--detach-sign'
            if (keyId != null) {
                args '--local-user', keyId.asHex
            }
            standardInput = inputStream
            standardOutput = outputStream
        }
    }

    PgpKeyId getKeyId() {
        if (project.hasProperty('signing.keyId')) {
            return new PgpKeyId(project.getProperty('signing.keyId'))
        } else {
            return null
        }
    }
}

class GnuPGSignatoryProvider implements SignatoryProvider {
    private Map<String,GnuPGSignatory> signatories = new HashMap()
    @Override
    void configure(SigningExtension signingExtension, Closure closure) {
        /* no-op - we do not support configuration. */
    }

    @Override
    Signatory getDefaultSignatory(Project project) {
        return new GnuPGSignatory(project)
    }

    @Override
    Signatory getSignatory(String s) {
        return signatories[s]
    }
}

signing {
    signatories = new GnuPGSignatoryProvider()
    required { isReleaseVersion }
    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.wagon
        def user = System.getenv('DEPLOY_USER') ?: project.properties.get('deploy.user', null)
        def password = System.getenv('DEPLOY_PASSWORD') ?: project.properties.get('deploy.password', null)

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            if (user != null && password != null) {
                authentication(userName: user, password: password)
            }
        }

        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
            if (user != null && password != null) {
                authentication(userName: user, password: password)
            }
        }

        beforeDeployment { deploy ->
            signing.signPom(deploy)
        }
    }
}

afterEvaluate {
    uploadArchives.repositories.mavenDeployer.pom.project {
        name projectName
        packaging 'jar'
        // optionally artifactId can be defined here
        description projectDescription
        url 'http://github.com/elehack/gradle-plugins'

        scm {
            connection 'scm:git:http://github.com/elehack/gradle-plugins.git'
            developerConnection 'scm:git:git@github.com:elehack/gradle-plugins.git'
            url 'http://github.com/elehack/gradle-plugins'
        }

        licenses {
            license {
                name 'MIT'
                url 'http://opensource.org/licenses/MIT'
            }
        }

        developers {
            developer {
                id 'michael@elehack.net'
                name 'Michael Ekstrand'
                email 'michael@elehack.net'
            }
        }
    }
}
